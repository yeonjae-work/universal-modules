name: Universal Modules CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'packages/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'packages/**'
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  # 변경된 모듈 감지
  detect-changes:
    name: "변경된 모듈 감지"
    runs-on: ubuntu-latest
    outputs:
      changed-modules: ${{ steps.changes.outputs.modules }}
      matrix: ${{ steps.changes.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 변경된 모듈 감지
        id: changes
        run: |
          # 변경된 파일 목록 가져오기
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }})
          else
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          fi
          
          echo "변경된 파일들:"
          echo "$CHANGED_FILES"
          
          # 변경된 모듈 추출
          MODULES=$(echo "$CHANGED_FILES" | grep "^packages/" | cut -d'/' -f2 | sort -u | tr '\n' ' ')
          
          if [ -z "$MODULES" ]; then
            echo "변경된 모듈이 없습니다."
            echo "modules=" >> $GITHUB_OUTPUT
            echo "matrix={\"include\":[]}" >> $GITHUB_OUTPUT
          else
            echo "변경된 모듈: $MODULES"
            echo "modules=$MODULES" >> $GITHUB_OUTPUT
            
            # Matrix 전략을 위한 JSON 생성
            MATRIX_JSON="{\"include\":["
            FIRST=true
            for module in $MODULES; do
              if [ "$FIRST" = true ]; then
                FIRST=false
              else
                MATRIX_JSON="$MATRIX_JSON,"
              fi
              MATRIX_JSON="$MATRIX_JSON{\"module\":\"$module\"}"
            done
            MATRIX_JSON="$MATRIX_JSON]}"
            
            echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT
          fi

  # 코드 품질 검사
  quality-check:
    name: "코드 품질 검사"
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.changed-modules != ''
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Python 환경 설정
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('packages/${{ matrix.module }}/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          cd packages/${{ matrix.module }}
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      
      - name: Code formatting check (Black)
        run: |
          cd packages/${{ matrix.module }}
          black --check --diff src/ tests/
      
      - name: Import sorting check (isort)
        run: |
          cd packages/${{ matrix.module }}
          isort --check-only --diff src/ tests/
      
      - name: Linting (Flake8)
        run: |
          cd packages/${{ matrix.module }}
          flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503
      
      - name: Type checking (MyPy)
        run: |
          cd packages/${{ matrix.module }}
          mypy src/ --ignore-missing-imports
      
      - name: Security check (Bandit)
        run: |
          cd packages/${{ matrix.module }}
          bandit -r src/ -f json -o bandit-report.json || true
      
      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report-${{ matrix.module }}
          path: packages/${{ matrix.module }}/bandit-report.json

  # 테스트 실행
  test:
    name: "테스트 실행"
    runs-on: ubuntu-latest
    needs: [detect-changes, quality-check]
    if: needs.detect-changes.outputs.changed-modules != ''
    strategy:
      matrix: 
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        module: ${{ fromJson(needs.detect-changes.outputs.changed-modules) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Python ${{ matrix.python-version }} 설정
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('packages/${{ matrix.module }}/pyproject.toml') }}
      
      - name: Install dependencies
        run: |
          cd packages/${{ matrix.module }}
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      
      - name: Run tests with coverage
        run: |
          cd packages/${{ matrix.module }}
          pytest tests/ -v --cov=src/ --cov-report=xml --cov-report=term
      
      - name: Upload coverage to Codecov
        if: matrix.python-version == env.PYTHON_VERSION
        uses: codecov/codecov-action@v3
        with:
          file: packages/${{ matrix.module }}/coverage.xml
          flags: ${{ matrix.module }}
          name: ${{ matrix.module }}-coverage
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.module }}-${{ matrix.python-version }}
          path: |
            packages/${{ matrix.module }}/pytest-results.xml
            packages/${{ matrix.module }}/htmlcov/

  # 성능 테스트
  performance-test:
    name: "성능 테스트"
    runs-on: ubuntu-latest
    needs: [detect-changes, test]
    if: needs.detect-changes.outputs.changed-modules != ''
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Python 환경 설정
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          cd packages/${{ matrix.module }}
          python -m pip install --upgrade pip
          pip install -e ".[dev]" pytest-benchmark
      
      - name: Run performance tests
        run: |
          cd packages/${{ matrix.module }}
          if [ -f "tests/test_performance.py" ]; then
            pytest tests/test_performance.py --benchmark-json=benchmark.json
          else
            echo "No performance tests found for ${{ matrix.module }}"
          fi
      
      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-${{ matrix.module }}
          path: packages/${{ matrix.module }}/benchmark.json

  # 문서 생성
  documentation:
    name: "문서 생성"
    runs-on: ubuntu-latest
    needs: [detect-changes, test]
    if: needs.detect-changes.outputs.changed-modules != ''
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Python 환경 설정
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install sphinx sphinx-rtd-theme myst-parser
          cd packages/${{ matrix.module }}
          pip install -e ".[dev]"
      
      - name: Generate API documentation
        run: |
          cd packages/${{ matrix.module }}
          mkdir -p docs/api
          sphinx-apidoc -o docs/api src/
      
      - name: Update module documentation
        run: |
          python scripts/update-documentation.py ${{ matrix.module }}
      
      - name: Build documentation
        run: |
          cd packages/${{ matrix.module }}
          if [ -f "docs/conf.py" ]; then
            sphinx-build -b html docs docs/_build/html
          fi
      
      - name: Upload documentation
        uses: actions/upload-artifact@v3
        with:
          name: docs-${{ matrix.module }}
          path: packages/${{ matrix.module }}/docs/_build/html/

  # 빌드 및 패키징
  build:
    name: "패키지 빌드"
    runs-on: ubuntu-latest
    needs: [detect-changes, test, quality-check]
    if: needs.detect-changes.outputs.changed-modules != ''
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Python 환경 설정
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      
      - name: Build package
        run: |
          cd packages/${{ matrix.module }}
          python -m build
      
      - name: Check package
        run: |
          cd packages/${{ matrix.module }}
          twine check dist/*
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.module }}-dist
          path: packages/${{ matrix.module }}/dist/

  # 보안 스캔
  security-scan:
    name: "보안 스캔"
    runs-on: ubuntu-latest
    needs: [detect-changes, build]
    if: needs.detect-changes.outputs.changed-modules != ''
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Python 환경 설정
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install safety pip-audit
      
      - name: Check dependencies for vulnerabilities
        run: |
          cd packages/${{ matrix.module }}
          pip install -e .
          safety check --json --output safety-report.json || true
          pip-audit --format=json --output=pip-audit-report.json || true
      
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-scan-${{ matrix.module }}
          path: |
            packages/${{ matrix.module }}/safety-report.json
            packages/${{ matrix.module }}/pip-audit-report.json

  # 배포 (메인 브랜치 푸시 시)
  deploy:
    name: "PyPI 배포"
    runs-on: ubuntu-latest
    needs: [detect-changes, test, quality-check, build, security-scan]
    if: |
      needs.detect-changes.outputs.changed-modules != '' &&
      github.ref == 'refs/heads/main' &&
      github.event_name == 'push'
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    

    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Python 환경 설정
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install twine semver toml
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.module }}-dist
          path: packages/${{ matrix.module }}/dist/
      
      - name: Check if version changed
        id: version-check
        run: |
          cd packages/${{ matrix.module }}
          current_version=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
          
          # 이전 태그와 비교
          latest_tag=$(git tag -l "${{ matrix.module }}-v*" --sort=-version:refname | head -n1)
          if [ -n "$latest_tag" ]; then
            latest_version=${latest_tag#${{ matrix.module }}-v}
            if [ "$current_version" != "$latest_version" ]; then
              echo "version-changed=true" >> $GITHUB_OUTPUT
              echo "new-version=$current_version" >> $GITHUB_OUTPUT
            else
              echo "version-changed=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "version-changed=true" >> $GITHUB_OUTPUT
            echo "new-version=$current_version" >> $GITHUB_OUTPUT
          fi
      
      - name: Create Git tag
        if: steps.version-check.outputs.version-changed == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "${{ matrix.module }}-v${{ steps.version-check.outputs.new-version }}" -m "${{ matrix.module }} v${{ steps.version-check.outputs.new-version }}"
          git push origin "${{ matrix.module }}-v${{ steps.version-check.outputs.new-version }}"
      
      - name: Publish to PyPI
        if: steps.version-check.outputs.version-changed == 'true'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          cd packages/${{ matrix.module }}
          twine upload dist/*
      
      - name: Update documentation
        if: steps.version-check.outputs.version-changed == 'true'
        run: |
          python scripts/update-documentation.py ${{ matrix.module }} --version=${{ steps.version-check.outputs.new-version }}
      
      - name: Create GitHub Release
        if: steps.version-check.outputs.version-changed == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ matrix.module }}-v${{ steps.version-check.outputs.new-version }}
          release_name: ${{ matrix.module }} v${{ steps.version-check.outputs.new-version }}
          body: |
            ## ${{ matrix.module }} v${{ steps.version-check.outputs.new-version }}
            
            자동 생성된 릴리스입니다.
            
            ### 설치 방법
            ```bash
            pip install universal-${{ matrix.module }}==${{ steps.version-check.outputs.new-version }}
            ```
            
            ### 변경사항
            이 릴리스의 상세한 변경사항은 [문서](https://github.com/${{ github.repository }}/blob/main/packages/${{ matrix.module }}/CHANGELOG.md)를 참조하세요.
          draft: false
          prerelease: false

  # 알림
  notify:
    name: "배포 알림"
    runs-on: ubuntu-latest
    needs: [detect-changes, deploy]
    if: always() && needs.detect-changes.outputs.changed-modules != ''
    
    steps:
      - name: 배포 성공 알림
        if: needs.deploy.result == 'success'
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{
              "text": "🚀 Universal Modules 배포 성공!",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "🚀 배포 완료"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*배포된 모듈:*\n${{ needs.detect-changes.outputs.changed-modules }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*브랜치:*\n${{ github.ref_name }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*커밋:*\n<${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*작성자:*\n${{ github.actor }}"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "GitHub Actions 보기"
                      },
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    },
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "PyPI 확인"
                      },
                      "url": "https://pypi.org/search/?q=universal"
                    }
                  ]
                }
              ]
            }' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 배포 실패 알림
        if: needs.deploy.result == 'failure'
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{
              "text": "❌ Universal Modules 배포 실패!",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "❌ 배포 실패"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*실패한 모듈:*\n${{ needs.detect-changes.outputs.changed-modules }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*브랜치:*\n${{ github.ref_name }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*커밋:*\n<${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*작성자:*\n${{ github.actor }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "🔍 *로그 확인이 필요합니다.*"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "로그 확인하기"
                      },
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                      "style": "danger"
                    }
                  ]
                }
              ]
            }' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 테스트 실패 알림
        if: needs.deploy.result == 'skipped' && contains(needs.*.result, 'failure')
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{
              "text": "⚠️ Universal Modules 테스트 실패!",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "⚠️ 테스트 실패"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*모듈:* ${{ needs.detect-changes.outputs.changed-modules }}\n*브랜치:* ${{ github.ref_name }}\n*작성자:* ${{ github.actor }}"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "테스트 로그 보기"
                      },
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                      "style": "primary"
                    }
                  ]
                }
              ]
            }' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

  # 메트릭 수집
  metrics:
    name: "메트릭 수집"
    runs-on: ubuntu-latest
    needs: [test, performance-test]
    if: always() && needs.detect-changes.outputs.changed-modules != ''
    
    steps:
      - name: Collect metrics
        run: |
          echo "Collecting CI/CD metrics..."
          # 메트릭 수집 로직 추가
          # 예: 테스트 시간, 빌드 시간, 커버리지 등
      
      - name: Send metrics to monitoring
        run: |
          echo "Sending metrics to monitoring system..."
          # 모니터링 시스템으로 메트릭 전송 