name: Universal Modules CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  pull-requests: write
  pages: write

env:
  PYTHON_VERSION: "3.11"
  # GitHub 이메일 알림 비활성화
  ACTIONS_RUNNER_DEBUG: false
  ACTIONS_STEP_DEBUG: false

jobs:
  # 변경된 모듈 감지
  detect-changes:
    name: "변경된 모듈 감지"
    runs-on: ubuntu-latest
    outputs:
      changed-modules: ${{ steps.changes.outputs.modules }}
      matrix: ${{ steps.changes.outputs.matrix }}
      has-changes: ${{ steps.changes.outputs.has-changes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 변경된 모듈 감지
        id: changes
        run: |
          # 모든 모듈 목록을 packages 디렉터리에서 동적으로 가져오기
          all_modules=$(ls -1 packages/ | tr '\n' ' ' | sed 's/ $//')
          echo "🔍 전체 모듈: $all_modules"
          
          # 변경된 파일 확인
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # PR의 경우 base 브랜치와 비교
            base_sha="${{ github.event.pull_request.base.sha }}"
            head_sha="${{ github.event.pull_request.head.sha }}"
            changed_files=$(git diff --name-only $base_sha..$head_sha)
          else
            # Push의 경우 이전 커밋과 비교
            if [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]; then
              changed_files=$(git diff --name-only ${{ github.event.before }}..${{ github.sha }})
            else
              # 첫 번째 커밋인 경우 모든 파일
              changed_files=$(git ls-files)
            fi
          fi
          
          echo "📄 변경된 파일들:"
          echo "$changed_files"
          
          # 변경된 모듈 추출
          changed_modules=""
          for module in $all_modules; do
            if echo "$changed_files" | grep -q "packages/$module/"; then
              if [ -z "$changed_modules" ]; then
                changed_modules="$module"
              else
                changed_modules="$changed_modules $module"
              fi
              echo "📦 변경 감지: $module"
            fi
          done
          
          # CI/CD 관련 파일이 변경된 경우 모든 모듈 처리
          if echo "$changed_files" | grep -E "(\.github/workflows|scripts/|Makefile|pyproject\.toml)"; then
            echo "🔧 CI/CD 파일 변경 감지 - 모든 모듈 처리"
            changed_modules="$all_modules"
          fi
          
          # 변경된 모듈이 없는 경우 처리
          if [ -z "$changed_modules" ]; then
            echo "📄 변경된 모듈 없음"
            echo "modules=" >> $GITHUB_OUTPUT
            echo "matrix={\"include\":[]}" >> $GITHUB_OUTPUT
            echo "has-changes=false" >> $GITHUB_OUTPUT
          else
            echo "📦 변경된 모듈: $changed_modules"
            echo "modules=$changed_modules" >> $GITHUB_OUTPUT
            
            # Matrix 전략을 위한 JSON 생성 (한 줄로)
            matrix_json='{"include":['
            first=true
            for module in $changed_modules; do
              if [ "$first" = true ]; then
                first=false
              else
                matrix_json="$matrix_json,"
              fi
              matrix_json="$matrix_json{\"module\":\"$module\"}"
            done
            matrix_json="$matrix_json]}"
            
            echo "matrix=$matrix_json" >> $GITHUB_OUTPUT
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "✅ 매트릭스 JSON: $matrix_json"
          fi

  # 코드 품질 검사
  quality-check:
    name: "코드 품질 검사"
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has-changes == 'true'
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Python 환경 설정
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: 의존성 설치
        run: |
          cd packages/${{ matrix.module }}
          python -m pip install --upgrade pip
          pip install -e ".[dev]" || pip install -e .

      - name: 코드 포맷팅 검사 (Black)
        run: |
          cd packages/${{ matrix.module }}
          pip install black
          black --check --diff src/ tests/ || true
      
      - name: Import 정렬 검사 (isort)
        run: |
          cd packages/${{ matrix.module }}
          pip install isort
          isort --check-only --diff src/ tests/ || true
      
      - name: 린팅 (flake8)
        run: |
          cd packages/${{ matrix.module }}
          pip install flake8
          flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503 || true

  # 테스트 실행
  test:
    name: "테스트 실행"
    runs-on: ubuntu-latest
    needs: [detect-changes, quality-check]
    if: needs.detect-changes.outputs.has-changes == 'true'
    strategy:
      matrix: 
        python-version: ["3.11"]
        module: ${{ fromJson(needs.detect-changes.outputs.matrix).include[*].module }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Python ${{ matrix.python-version }} 설정
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: 의존성 설치
        run: |
          cd packages/${{ matrix.module }}
          python -m pip install --upgrade pip
          pip install -e ".[dev]" || pip install -e .

      - name: 테스트 실행
        run: |
          cd packages/${{ matrix.module }}
          pip install pytest pytest-cov
          pytest tests/ -v --cov=src/ --cov-report=xml --cov-report=term || true

  # 패키지 빌드
  build:
    name: "패키지 빌드"
    runs-on: ubuntu-latest
    needs: [detect-changes, test]
    if: needs.detect-changes.outputs.has-changes == 'true'
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Python 환경 설정
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: 빌드 도구 설치
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: 패키지 빌드
        run: |
          cd packages/${{ matrix.module }}
          python -m build
          echo "✅ ${{ matrix.module }} 빌드 완료"

      - name: 빌드 아티팩트 업로드
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.module }}
          path: packages/${{ matrix.module }}/dist/
          retention-days: 7

  # 문서 업데이트
  documentation:
    name: "문서 업데이트"
    runs-on: ubuntu-latest
    needs: [detect-changes, build]
    if: needs.detect-changes.outputs.has-changes == 'true' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Python 환경 설정
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 문서 업데이트 의존성 설치
        run: |
          python -m pip install --upgrade pip
          pip install toml

      - name: 문서 업데이트 스크립트 실행
        run: |
          if [ -f "scripts/update-documentation.py" ]; then
            python scripts/update-documentation.py
            echo "📚 문서 업데이트 완료"
          else
            echo "📚 문서 업데이트 스크립트를 찾을 수 없습니다."
          fi

      - name: 변경사항 커밋 및 푸시
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # docs 디렉터리가 없으면 생성
          if [ ! -d "docs" ]; then
            mkdir -p docs
            echo "📁 docs 디렉터리 생성"
          fi
          
          # Git에서 추적하지 않는 파일들 확인
          if git status --porcelain | grep -q .; then
            git add .
            git commit -m "docs: Update documentation [skip ci]" || echo "커밋할 변경사항이 없습니다."
            git push || echo "푸시할 변경사항이 없습니다."
            echo "📚 문서 변경사항 커밋 및 푸시 완료"
          else
            echo "📚 문서 변경사항 없음"
          fi

  # PyPI 배포
  deploy:
    name: "PyPI 배포"
    runs-on: ubuntu-latest
    needs: [detect-changes, build, documentation]
    if: needs.detect-changes.outputs.has-changes == 'true' && github.ref == 'refs/heads/main'
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Python 환경 설정
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: 빌드 아티팩트 다운로드
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ matrix.module }}
          path: packages/${{ matrix.module }}/dist/

      - name: 버전 변경 확인
        id: version-check
        run: |
          cd packages/${{ matrix.module }}
          
          # pyproject.toml에서 패키지명과 버전 추출
          if [ -f "pyproject.toml" ]; then
            # grep과 sed를 사용하여 패키지명 추출
            package_name=$(grep '^name\s*=' pyproject.toml | head -n1 | sed 's/.*=\s*["\x27]\([^"\x27]*\)["\x27].*/\1/' | tr -d ' ')
            if [ -z "$package_name" ]; then
              echo "⚠️ 패키지명을 찾을 수 없습니다. 기본값 사용: ${{ matrix.module }}"
              package_name="${{ matrix.module }}"
            fi
            
            # 버전 추출
            current_version=$(grep '^version\s*=' pyproject.toml | head -n1 | sed 's/.*=\s*["\x27]\([^"\x27]*\)["\x27].*/\1/' | tr -d ' ')
            
            echo "📦 패키지명: $package_name"
            echo "🏷️ 현재 버전: $current_version"
            
            # PyPI에서 최신 버전 확인
            latest_version=$(pip index versions "$package_name" 2>/dev/null | head -n1 | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+' | head -n1 || echo "0.0.0")
            echo "🏷️ PyPI 최신 버전: $latest_version"
            
            if [ "$current_version" != "$latest_version" ]; then
              echo "🚀 새 버전 감지: $latest_version -> $current_version"
              echo "should-deploy=true" >> $GITHUB_OUTPUT
              echo "package-name=$package_name" >> $GITHUB_OUTPUT
              echo "version=$current_version" >> $GITHUB_OUTPUT
            else
              echo "📋 버전 변경 없음: $current_version"
              echo "should-deploy=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ pyproject.toml 파일을 찾을 수 없습니다."
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

      - name: PyPI에 배포
        if: steps.version-check.outputs.should-deploy == 'true'
        run: |
          cd packages/${{ matrix.module }}
          pip install twine
          python -m twine upload dist/* --username __token__ --password ${{ secrets.PYPI_API_TOKEN }} --skip-existing
          echo "🚀 ${{ steps.version-check.outputs.package-name }} v${{ steps.version-check.outputs.version }} PyPI 배포 완료"

  # 알림
  notification:
    name: "알림"
    runs-on: ubuntu-latest
    needs: [detect-changes, quality-check, test, build, documentation, deploy]
    if: always() && needs.detect-changes.outputs.has-changes == 'true'
    
    steps:
      - name: 성공 알림
        if: needs.deploy.result == 'success'
        run: |
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data '{
                "text": "🚀 Universal Modules 배포 성공!",
                "blocks": [
                  {
                    "type": "header",
                    "text": {
                      "type": "plain_text",
                      "text": "🚀 배포 성공"
                    }
                  },
                  {
                    "type": "section",
                    "fields": [
                      {
                        "type": "mrkdwn",
                        "text": "*배포된 모듈:*\n${{ needs.detect-changes.outputs.changed-modules }}"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "*브랜치:*\n${{ github.ref_name }}"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "*커밋:*\n<${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "*작성자:*\n${{ github.actor }}"
                      }
                    ]
                  },
                  {
                    "type": "actions",
                    "elements": [
                      {
                        "type": "button",
                        "text": {
                          "type": "plain_text",
                          "text": "PyPI에서 확인하기"
                        },
                        "url": "https://pypi.org/user/yeonjae0901/"
                      }
                    ]
                  }
                ]
              }' \
              ${{ secrets.SLACK_WEBHOOK_URL }}
          else
            echo "SLACK_WEBHOOK_URL이 설정되지 않아 Slack 알림을 건너뜁니다."
          fi

      - name: 테스트 실패 알림
        if: needs.test.result == 'failure'
        run: |
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data '{
                "text": "❌ Universal Modules 테스트 실패!",
                "blocks": [
                  {
                    "type": "header",
                    "text": {
                      "type": "plain_text",
                      "text": "❌ 테스트 실패"
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "*모듈:* ${{ needs.detect-changes.outputs.changed-modules }}\n*브랜치:* ${{ github.ref_name }}\n*작성자:* ${{ github.actor }}"
                    }
                  },
                  {
                    "type": "actions",
                    "elements": [
                      {
                        "type": "button",
                        "text": {
                          "type": "plain_text",
                          "text": "테스트 로그 보기"
                        },
                        "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                        "style": "danger"
                      }
                    ]
                  }
                ]
              }' \
              ${{ secrets.SLACK_WEBHOOK_URL }}
          else
            echo "SLACK_WEBHOOK_URL이 설정되지 않아 Slack 알림을 건너뜁니다."
          fi

      - name: 빌드 실패 알림
        if: needs.build.result == 'failure'
        run: |
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data '{
                "text": "🔨 Universal Modules 빌드 실패!",
                "blocks": [
                  {
                    "type": "header",
                    "text": {
                      "type": "plain_text",
                      "text": "🔨 빌드 실패"
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "*모듈:* ${{ needs.detect-changes.outputs.changed-modules }}\n*브랜치:* ${{ github.ref_name }}\n*작성자:* ${{ github.actor }}"
                    }
                  },
                  {
                    "type": "actions",
                    "elements": [
                      {
                        "type": "button",
                        "text": {
                          "type": "plain_text",
                          "text": "빌드 로그 보기"
                        },
                        "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                        "style": "danger"
                      }
                    ]
                  }
                ]
              }' \
              ${{ secrets.SLACK_WEBHOOK_URL }}
          else
            echo "SLACK_WEBHOOK_URL이 설정되지 않아 Slack 알림을 건너뜁니다."
          fi

      - name: 문서 업데이트 실패 알림
        if: needs.documentation.result == 'failure'
        run: |
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data '{
                "text": "📚 Universal Modules 문서 업데이트 실패!",
                "blocks": [
                  {
                    "type": "header",
                    "text": {
                      "type": "plain_text",
                      "text": "📚 문서 업데이트 실패"
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "*모듈:* ${{ needs.detect-changes.outputs.changed-modules }}\n*브랜치:* ${{ github.ref_name }}\n*작성자:* ${{ github.actor }}"
                    }
                  },
                  {
                    "type": "actions",
                    "elements": [
                      {
                        "type": "button",
                        "text": {
                          "type": "plain_text",
                          "text": "문서 로그 보기"
                        },
                        "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                        "style": "primary"
                      }
                    ]
                  }
                ]
              }' \
              ${{ secrets.SLACK_WEBHOOK_URL }}
          else
            echo "SLACK_WEBHOOK_URL이 설정되지 않아 Slack 알림을 건너뜁니다."
          fi

      - name: 배포 실패 알림
        if: needs.deploy.result == 'failure'
        run: |
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data '{
                "text": "❌ Universal Modules 배포 실패!",
                "blocks": [
                  {
                    "type": "header",
                    "text": {
                      "type": "plain_text",
                      "text": "❌ 배포 실패"
                    }
                  },
                  {
                    "type": "section",
                    "fields": [
                      {
                        "type": "mrkdwn",
                        "text": "*실패한 모듈:*\n${{ needs.detect-changes.outputs.changed-modules }}"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "*브랜치:*\n${{ github.ref_name }}"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "*커밋:*\n<${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "*작성자:*\n${{ github.actor }}"
                      }
                    ]
                  },
                  {
                    "type": "actions",
                    "elements": [
                      {
                        "type": "button",
                        "text": {
                          "type": "plain_text",
                          "text": "로그 확인하기"
                        },
                        "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                        "style": "danger"
                      }
                    ]
                  }
                ]
              }' \
              ${{ secrets.SLACK_WEBHOOK_URL }}
          else
            echo "SLACK_WEBHOOK_URL이 설정되지 않아 Slack 알림을 건너뜁니다."
          fi

      - name: 전체 워크플로우 성공 알림
        if: needs.deploy.result == 'skipped' && !contains(needs.*.result, 'failure')
        run: |
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data '{
                "text": "✅ Universal Modules 처리 완료 (배포 없음)",
                "blocks": [
                  {
                    "type": "header",
                    "text": {
                      "type": "plain_text",
                      "text": "✅ 처리 완료"
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "*모듈:* ${{ needs.detect-changes.outputs.changed-modules }}\n*상태:* 테스트/빌드 성공, 버전 변경 없어 배포 스킵\n*브랜치:* ${{ github.ref_name }}\n*작성자:* ${{ github.actor }}"
                    }
                  },
                  {
                    "type": "actions",
                    "elements": [
                      {
                        "type": "button",
                        "text": {
                          "type": "plain_text",
                          "text": "워크플로우 로그 보기"
                        },
                        "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                      }
                    ]
                  }
                ]
              }' \
              ${{ secrets.SLACK_WEBHOOK_URL }}
          else
            echo "SLACK_WEBHOOK_URL이 설정되지 않아 Slack 알림을 건너뜁니다."
          fi 